// <auto-generated />
using System;
using IslandFoodmart.Areas.Identity.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace IslandFoodmart.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20231022231138_SpecialPrices")]
    partial class SpecialPrices
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("IslandFoodmart.Areas.Identity.Data.DatabaseUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("IslandFoodmart.Models.Category", b =>
                {
                    b.Property<int>("CategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("CategoryID");

                    b.ToTable("Category");

                    b.HasData(
                        new
                        {
                            CategoryID = 1,
                            CategoryName = "Fresh Foods"
                        },
                        new
                        {
                            CategoryID = 2,
                            CategoryName = "Frozen Foods"
                        },
                        new
                        {
                            CategoryID = 3,
                            CategoryName = "Drinks"
                        },
                        new
                        {
                            CategoryID = 4,
                            CategoryName = "Pantry"
                        },
                        new
                        {
                            CategoryID = 5,
                            CategoryName = "Personal Care"
                        },
                        new
                        {
                            CategoryID = 6,
                            CategoryName = "Dairy"
                        });
                });

            modelBuilder.Entity("IslandFoodmart.Models.Payment", b =>
                {
                    b.Property<int>("PaymentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<decimal>("PaymentAmount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("ShoppingOrderID")
                        .HasColumnType("int");

                    b.HasKey("PaymentID");

                    b.HasIndex("ShoppingOrderID")
                        .IsUnique();

                    b.ToTable("Payment");
                });

            modelBuilder.Entity("IslandFoodmart.Models.Product", b =>
                {
                    b.Property<int>("ProductID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CategoryID")
                        .HasColumnType("int");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<decimal>("ProductPrice")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("ProductStock")
                        .HasColumnType("int");

                    b.Property<decimal>("SpecialPrice")
                        .HasColumnType("decimal(65,30)");

                    b.HasKey("ProductID");

                    b.HasIndex("CategoryID");

                    b.ToTable("Product");

                    b.HasData(
                        new
                        {
                            ProductID = 1,
                            CategoryID = 6,
                            ImagePath = "foodimage_0000_Layer-30.png",
                            ProductName = "Ben & Jerry's Chocolate Chip Cookie Dough",
                            ProductPrice = 12.99m,
                            ProductStock = 9,
                            SpecialPrice = 0m
                        },
                        new
                        {
                            ProductID = 2,
                            CategoryID = 6,
                            ImagePath = "foodimage_0001_Layer-29.png",
                            ProductName = "Tip Top Creamy Vanilla 2L",
                            ProductPrice = 6.20m,
                            ProductStock = 7,
                            SpecialPrice = 0m
                        },
                        new
                        {
                            ProductID = 3,
                            CategoryID = 5,
                            ImagePath = "foodimage_0002_Layer-28.png",
                            ProductName = "Band-Aid",
                            ProductPrice = 4m,
                            ProductStock = 20,
                            SpecialPrice = 0m
                        },
                        new
                        {
                            ProductID = 4,
                            CategoryID = 5,
                            ImagePath = "foodimage_0003_Layer-27.png",
                            ProductName = "Panadol Paracetamol 500mg",
                            ProductPrice = 11.99m,
                            ProductStock = 20,
                            SpecialPrice = 0m
                        },
                        new
                        {
                            ProductID = 5,
                            CategoryID = 5,
                            ImagePath = "foodimage_0004_Layer-26.png",
                            ProductName = "Colgate Triple Action 110g",
                            ProductPrice = 4.5m,
                            ProductStock = 12,
                            SpecialPrice = 4m
                        },
                        new
                        {
                            ProductID = 6,
                            CategoryID = 4,
                            ImagePath = "foodimage_0005_Layer-25.png",
                            ProductName = "Maggi Chicken Moodles 360g",
                            ProductPrice = 5m,
                            ProductStock = 10,
                            SpecialPrice = 4.5m
                        },
                        new
                        {
                            ProductID = 7,
                            CategoryID = 4,
                            ImagePath = "foodimage_0006_Layer-24.png",
                            ProductName = "Indomie Instant Noodles 85g",
                            ProductPrice = 5.99m,
                            ProductStock = 11,
                            SpecialPrice = 0m
                        },
                        new
                        {
                            ProductID = 8,
                            CategoryID = 4,
                            ImagePath = "foodimage_0007_Layer-23.png",
                            ProductName = "Pacific Corned Beef 340g",
                            ProductPrice = 9.99m,
                            ProductStock = 15,
                            SpecialPrice = 0m
                        },
                        new
                        {
                            ProductID = 9,
                            CategoryID = 4,
                            ImagePath = "foodimage_0008_Layer-22.png",
                            ProductName = "Palm Corned Beef 326g",
                            ProductPrice = 10.99m,
                            ProductStock = 9,
                            SpecialPrice = 0m
                        },
                        new
                        {
                            ProductID = 10,
                            CategoryID = 2,
                            ImagePath = "foodimage_0009_Layer-21.png",
                            ProductName = "Tegal Whole Chicken 2.3kg",
                            ProductPrice = 15.60m,
                            ProductStock = 12,
                            SpecialPrice = 0m
                        },
                        new
                        {
                            ProductID = 11,
                            CategoryID = 2,
                            ImagePath = "foodimage_0010_Layer-20.png",
                            ProductName = "New Zealand Peas 1kg",
                            ProductPrice = 5.5m,
                            ProductStock = 10,
                            SpecialPrice = 0m
                        },
                        new
                        {
                            ProductID = 12,
                            CategoryID = 6,
                            ImagePath = "foodimage_0011_Layer-19.png",
                            ProductName = "UHF Standard Milk 1L",
                            ProductPrice = 3.5m,
                            ProductStock = 10,
                            SpecialPrice = 0m
                        },
                        new
                        {
                            ProductID = 13,
                            CategoryID = 4,
                            ImagePath = "foodimage_0012_Layer-18.png",
                            ProductName = "Shapes Cheese & Bacon 180g",
                            ProductPrice = 4m,
                            ProductStock = 18,
                            SpecialPrice = 0m
                        },
                        new
                        {
                            ProductID = 14,
                            CategoryID = 5,
                            ImagePath = "foodimage_0013_Layer-17.png",
                            ProductName = "Toilet Paper 3ply",
                            ProductPrice = 18m,
                            ProductStock = 6,
                            SpecialPrice = 16.99m
                        },
                        new
                        {
                            ProductID = 15,
                            CategoryID = 5,
                            ImagePath = "foodimage_0014_Layer-16.png",
                            ProductName = "Toilet Paper 2ply",
                            ProductPrice = 14.99m,
                            ProductStock = 7,
                            SpecialPrice = 0m
                        },
                        new
                        {
                            ProductID = 16,
                            CategoryID = 4,
                            ImagePath = "foodimage_0015_Layer-15.png",
                            ProductName = "Griffins Cookie Bear H&T",
                            ProductPrice = 3m,
                            ProductStock = 6,
                            SpecialPrice = 0m
                        },
                        new
                        {
                            ProductID = 17,
                            CategoryID = 1,
                            ImagePath = "foodimage_0016_Layer-14.png",
                            ProductName = "Farmer Brown Dozen Eggs",
                            ProductPrice = 12m,
                            ProductStock = 4,
                            SpecialPrice = 0m
                        },
                        new
                        {
                            ProductID = 18,
                            CategoryID = 1,
                            ImagePath = "foodimage_0017_Layer-13.png",
                            ProductName = "Tip Top White Toast Bread",
                            ProductPrice = 5m,
                            ProductStock = 8,
                            SpecialPrice = 0m
                        },
                        new
                        {
                            ProductID = 19,
                            CategoryID = 1,
                            ImagePath = "foodimage_0018_Layer-12.png",
                            ProductName = "Natures Fresh White Toast Bread",
                            ProductPrice = 6m,
                            ProductStock = 8,
                            SpecialPrice = 5.5m
                        },
                        new
                        {
                            ProductID = 20,
                            CategoryID = 5,
                            ImagePath = "foodimage_0019_Layer-11.png",
                            ProductName = "Nivea Protect & Moisture Sunscreen 50+SPF",
                            ProductPrice = 18.99m,
                            ProductStock = 5,
                            SpecialPrice = 16.99m
                        },
                        new
                        {
                            ProductID = 21,
                            CategoryID = 3,
                            ImagePath = "foodimage_0020_Layer-10.png",
                            ProductName = "Coke Classic 2L",
                            ProductPrice = 5.5m,
                            ProductStock = 20,
                            SpecialPrice = 0m
                        },
                        new
                        {
                            ProductID = 22,
                            CategoryID = 3,
                            ImagePath = "foodimage_0021_Layer-9.png",
                            ProductName = "Sprite Natural Flavour 2L",
                            ProductPrice = 5.5m,
                            ProductStock = 20,
                            SpecialPrice = 0m
                        },
                        new
                        {
                            ProductID = 23,
                            CategoryID = 3,
                            ImagePath = "foodimage_0022_Layer-8.png",
                            ProductName = "Coke Classic 440ml",
                            ProductPrice = 3.99m,
                            ProductStock = 41,
                            SpecialPrice = 2.99m
                        },
                        new
                        {
                            ProductID = 24,
                            CategoryID = 3,
                            ImagePath = "foodimage_0023_Layer-7.png",
                            ProductName = "V Drink Green 500ml",
                            ProductPrice = 5.5m,
                            ProductStock = 30,
                            SpecialPrice = 4.5m
                        },
                        new
                        {
                            ProductID = 25,
                            CategoryID = 3,
                            ImagePath = "foodimage_0024_Layer-6.png",
                            ProductName = "V Drink Greem 250ml",
                            ProductPrice = 3.2m,
                            ProductStock = 50,
                            SpecialPrice = 0m
                        },
                        new
                        {
                            ProductID = 26,
                            CategoryID = 3,
                            ImagePath = "foodimage_0025_Layer-5.png",
                            ProductName = "V Drink Blue 500ml",
                            ProductPrice = 5.5m,
                            ProductStock = 42,
                            SpecialPrice = 4.5m
                        },
                        new
                        {
                            ProductID = 27,
                            CategoryID = 6,
                            ImagePath = "foodimage_0026_Layer-4.png",
                            ProductName = "Meadow Fresh Original Milk 2L",
                            ProductPrice = 6.5m,
                            ProductStock = 8,
                            SpecialPrice = 0m
                        },
                        new
                        {
                            ProductID = 28,
                            CategoryID = 4,
                            ImagePath = "foodimage_0027_Layer-3.png",
                            ProductName = "Anchor Blue Milk Powder 1kg",
                            ProductPrice = 3.5m,
                            ProductStock = 7,
                            SpecialPrice = 0m
                        },
                        new
                        {
                            ProductID = 29,
                            CategoryID = 6,
                            ImagePath = "foodimage_0028_Layer-2.png",
                            ProductName = "Anchor Blue Milk 3L",
                            ProductPrice = 7m,
                            ProductStock = 20,
                            SpecialPrice = 0m
                        },
                        new
                        {
                            ProductID = 30,
                            CategoryID = 6,
                            ImagePath = "foodimage_0029_Layer-1.png",
                            ProductName = "Anchor Blue Milk 2L",
                            ProductPrice = 5.5m,
                            ProductStock = 20,
                            SpecialPrice = 0m
                        });
                });

            modelBuilder.Entity("IslandFoodmart.Models.ShoppingItem", b =>
                {
                    b.Property<int>("ShoppingItemID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("ShoppingOrderID")
                        .HasColumnType("int");

                    b.HasKey("ShoppingItemID");

                    b.HasIndex("ProductID");

                    b.HasIndex("ShoppingOrderID");

                    b.ToTable("ShoppingItem");
                });

            modelBuilder.Entity("IslandFoodmart.Models.ShoppingOrder", b =>
                {
                    b.Property<int>("ShoppingOrderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CartQuantity")
                        .HasColumnType("int");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("OrderStatus")
                        .HasColumnType("int");

                    b.Property<DateTime>("PickupDate")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal>("PriceTotal")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("ShoppingFirstName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("ShoppingOrderID");

                    b.ToTable("ShoppingOrder");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("IslandFoodmart.Models.Payment", b =>
                {
                    b.HasOne("IslandFoodmart.Models.ShoppingOrder", "ShoppingOrder")
                        .WithOne("Payment")
                        .HasForeignKey("IslandFoodmart.Models.Payment", "ShoppingOrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ShoppingOrder");
                });

            modelBuilder.Entity("IslandFoodmart.Models.Product", b =>
                {
                    b.HasOne("IslandFoodmart.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("IslandFoodmart.Models.ShoppingItem", b =>
                {
                    b.HasOne("IslandFoodmart.Models.Product", "Product")
                        .WithMany("ShoppingItems")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IslandFoodmart.Models.ShoppingOrder", "ShoppingOrder")
                        .WithMany("ShoppingItems")
                        .HasForeignKey("ShoppingOrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("ShoppingOrder");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("IslandFoodmart.Areas.Identity.Data.DatabaseUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("IslandFoodmart.Areas.Identity.Data.DatabaseUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IslandFoodmart.Areas.Identity.Data.DatabaseUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("IslandFoodmart.Areas.Identity.Data.DatabaseUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IslandFoodmart.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("IslandFoodmart.Models.Product", b =>
                {
                    b.Navigation("ShoppingItems");
                });

            modelBuilder.Entity("IslandFoodmart.Models.ShoppingOrder", b =>
                {
                    b.Navigation("Payment")
                        .IsRequired();

                    b.Navigation("ShoppingItems");
                });
#pragma warning restore 612, 618
        }
    }
}
